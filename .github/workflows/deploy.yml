name: Deploy to Hostinger

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json, zip
          tools: composer:v2
          coverage: none

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Composer Dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer Dependencies
        run: composer install --optimize-autoloader --no-dev --prefer-dist --no-interaction

      - name: Install NPM Dependencies
        run: npm install --prefer-offline --no-audit

      - name: Build Frontend Assets
        run: npm run build

      - name: Create Deployment Package
        run: |
          mkdir -p deployment
          rsync -av --exclude='.git' --exclude='.github' --exclude='node_modules' --exclude='tests' --exclude='.env' --exclude='storage/logs' --exclude='storage/framework/cache' --exclude='storage/framework/sessions' --exclude='storage/framework/views' --exclude='deployment' ./ deployment/
          cd deployment
          tar -czf ../deploy.tar.gz .
          cd ..

      - name: Deploy to Hostinger via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USERNAME }}
          key: ${{ secrets.HOSTINGER_SSH_KEY }}
          port: ${{ secrets.HOSTINGER_PORT }}
          script: |
            # Navigate to Laravel application directory
            cd /home/u885878505/domains/avhira.com/avhira
            
            # Create backup of current deployment
            BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
            mkdir -p $BACKUP_DIR
            
            # Backup important directories and files
            if [ -f ".env" ]; then
              cp .env $BACKUP_DIR/.env
            fi
            
            if [ -d "storage" ]; then
              cp -r storage/app $BACKUP_DIR/storage_app
            fi
            
            echo "Backup created at $BACKUP_DIR"
            
            # Enable maintenance mode
            php artisan down || echo "Maintenance mode already enabled or command failed"

      - name: Upload Deployment Package
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USERNAME }}
          key: ${{ secrets.HOSTINGER_SSH_KEY }}
          port: ${{ secrets.HOSTINGER_PORT }}
          source: "deploy.tar.gz"
          target: "/home/u885878505/domains/avhira.com/avhira"

      - name: Extract and Finalize Deployment
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USERNAME }}
          key: ${{ secrets.HOSTINGER_SSH_KEY }}
          port: ${{ secrets.HOSTINGER_PORT }}
          command_timeout: 20m
          script: |
            # Define paths
            LARAVEL_PATH="/home/u885878505/domains/avhira.com/avhira"
            WEB_ROOT="/home/u885878505/domains/avhira.com/public_html"
            
            # Navigate to Laravel application directory
            cd $LARAVEL_PATH
            
            # Extract deployment package
            tar -xzf deploy.tar.gz
            rm deploy.tar.gz
            
            # Deploy build assets to web root
            echo "Deploying frontend assets to web root..."
            if [ -d "public/build" ]; then
              rm -f public/build
              rm -rf $WEB_ROOT/build
              cp -r public/build $WEB_ROOT/build
              echo "Build assets deployed to web root"
              ln -sf $WEB_ROOT/build $LARAVEL_PATH/public/build
            fi
            
            # Copy other public assets to web root
            for item in favicon.ico favicon.svg apple-touch-icon.png logo.svg robots.txt images; do
              if [ -e "public/$item" ]; then
                cp -r public/$item $WEB_ROOT/
              fi
            done
            
            # Create index.php in web root
            echo "<?php" > $WEB_ROOT/index.php
            echo "" >> $WEB_ROOT/index.php
            echo "use Illuminate\\Http\\Request;" >> $WEB_ROOT/index.php
            echo "" >> $WEB_ROOT/index.php
            echo "define('LARAVEL_START', microtime(true));" >> $WEB_ROOT/index.php
            echo "" >> $WEB_ROOT/index.php
            echo "if (file_exists(__DIR__.'/../avhira/storage/framework/maintenance.php')) {" >> $WEB_ROOT/index.php
            echo "    require __DIR__.'/../avhira/storage/framework/maintenance.php';" >> $WEB_ROOT/index.php
            echo "}" >> $WEB_ROOT/index.php
            echo "" >> $WEB_ROOT/index.php
            echo "require __DIR__.'/../avhira/vendor/autoload.php';" >> $WEB_ROOT/index.php
            echo "" >> $WEB_ROOT/index.php
            echo "(require_once __DIR__.'/../avhira/bootstrap/app.php')" >> $WEB_ROOT/index.php
            echo "    ->handleRequest(Request::capture());" >> $WEB_ROOT/index.php
            echo "index.php created in web root"
            
            # Copy .htaccess to web root
            if [ -f "public/.htaccess" ]; then
              cp public/.htaccess $WEB_ROOT/.htaccess
            fi
            
            # Restore .env file from backup if it doesn't exist
            if [ ! -f ".env" ] && [ -f "backups/latest/.env" ]; then
              cp backups/latest/.env .env
            fi
            
            # Create public directory if it doesn't exist
            mkdir -p public
            
            # Create storage symlink
            rm -f $WEB_ROOT/storage
            ln -sf $LARAVEL_PATH/storage/app/public $WEB_ROOT/storage
            echo "Storage symlink created"
            
            # Set proper permissions
            chmod -R 755 storage bootstrap/cache
            chmod -R 775 storage/logs storage/framework
            
            # Run Laravel optimizations
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan event:cache
            
            # Run database migrations
            php artisan migrate --force
            
            # Clear and optimize
            php artisan optimize
            
            # Disable maintenance mode
            php artisan up
            
            # Create symlink to latest backup
            ln -sfn backups/$(ls -t backups | head -1) backups/latest
            
            echo "Deployment completed successfully!"
            echo "Laravel app at $LARAVEL_PATH"
            echo "Web root at $WEB_ROOT"
            echo "Application is now live on avhira.com"

      - name: Deployment Status Notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment to Hostinger completed successfully!"
            echo "üåê Your application is now live at avhira.com"
          else
            echo "‚ùå Deployment failed. Please check the logs above."
            echo "üìã Restore from backup if needed using: backups/latest/"
          fi
